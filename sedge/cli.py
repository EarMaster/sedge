import difflib
import os.path
import sys
from pathlib import Path
from tempfile import NamedTemporaryFile

import click

from .engine import SedgeEngine, ConfigOutput
from .keylib import KeyLibrary
from .templates import sedge_config_header


def ask_overwrite(fname):
    click.echo("WARNING: `{}' already exists and was not generated by sedge.".format(fname), err=True)
    confirm = input("Enter `yes' to overwite: ")
    return confirm == 'yes'


def check_or_confirm_overwrite(fname):
    """returns True if OK to proceed, False otherwise"""
    try:
        with open(fname) as fd:
            header = next(fd)
            if header.find(':sedge:') == -1:
                okay = ask_overwrite(fname)
                if okay:
                    backup_file = fname + '.pre-sedge'
                    os.rename(fname, backup_file)
                    click.echo('Your previous SSH configuration file has been renamed to:\n{}'.format(backup_file),
                               err=True)
    except OSError as e:
        click.echo('Error: ', e)
    except StopIteration as e:
        click.echo('Error: ', e)
    return True


def diff_config_changes(before, after):
    def get_data(f):
        with open(f) as fd:
            return fd.read().splitlines(True)

    a = get_data(before)
    b = get_data(after)
    diff_lines = list(difflib.unified_diff(a, b))
    if not diff_lines:
        click.echo('no changes.', err=True)
    else:
        click.echo('configuration changes:', err=True)
        click.echo(''.join(diff_lines), err=True)


class SedgeConfig:
    def __init__(self):
        pass


sedge_config = click.make_pass_decorator(SedgeConfig, ensure=True)


@click.group()
@click.version_option()
@click.option('-c',
              '--config-file',
              default=os.path.expanduser('~/.sedge/config'), )
@click.option('-o',
              '--output-file',
              default=os.path.expanduser('~/.ssh/config'), )
@click.option('-n',
              '--no-verify',
              is_flag=True,
              help='do not verify HTTPS requests')
@click.option('-k',
              '--key-directory',
              default=os.path.expanduser('~/.ssh'),
              help='directory to scan for SSH keys', )
@click.option('-v', '--verbose', count=True, default=0)
@sedge_config
def cli(config, verbose, key_directory, no_verify, output_file, config_file):
    """
    Template and share OpenSSH ssh_config(5) files. A preprocessor for
    OpenSSH configurations.
    """
    config.verbose = verbose
    config.key_directory = key_directory
    config.config_file = config_file
    config.output_file = output_file
    config.no_verify = no_verify


@cli.command('update')
@sedge_config
def update(config):
    """
    Update ssh config from sedge specification
    """

    def write_to(out):
        config.output(out)

    config_file = Path(config.config_file)
    if not config_file.is_file():
        click.echo('No file {} '.format(config_file))
        sys.exit()

    library = KeyLibrary(config.key_directory)
    with config_file.open() as fd:
        config = SedgeEngine(library, fd, not config.no_verify, url=config.config_file)
    if config.output_file == '-':
        write_to(ConfigOutput(sys.stdout))
        return
    if not check_or_confirm_overwrite(config.output_file):
        click.echo('Aborting.', err=True)
        sys.exit(1)

    tmpf = NamedTemporaryFile(mode='w', dir=os.path.dirname(config.output_file), delete=False)
    try:
        tmpf.file.write(sedge_config_header.format(config.config_file))
        write_to(ConfigOutput(tmpf.file))
        tmpf.close()
        if config.verbose:
            diff_config_changes(config.output_file, tmpf.name)
        os.rename(tmpf.name, config.output_file)
    except:
        os.unlink(tmpf.name)
        raise


@cli.group()
@sedge_config
def keys(config):
    """
    Manage ssh keys
    """


@keys.command('list')
@sedge_config
def command_list_keys(config):
    library = KeyLibrary(config.key_directory)
    library.list_keys()


@keys.command('add')
@sedge_config
def command_add_keys(config):
    library = KeyLibrary(config.key_directory)
    library.add_keys()
