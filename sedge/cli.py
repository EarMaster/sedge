import argparse
import os.path
import sys
from tempfile import NamedTemporaryFile
from .engine import SedgeEngine, ParserException
from .keylib import KeyLibrary


def ask_overwrite(fname):
    print(
        "WARNING: `%s' already exists and was not generated by sedge." % fname,
        file=sys.stderr)
    confirm = input("Enter `yes' to overwite: ")
    return confirm == 'yes'


def check_or_confirm_overwrite(fname):
    "returns True if OK to proceed, False otherwise"
    try:
        with open(fname) as fd:
            header = next(fd)
            if header.find('generated by sedge') == -1:
                return ask_overwrite(fname)
    except OSError:
        pass
    except StopIteration:
        pass
    return True


def process(args):
    library = KeyLibrary(args.key_directory, verbose=args.verbose)
    library.scan()
    with open(args.config_file) as fd:
        config = SedgeEngine(library, fd)
    if args.output_file == '-':
        config.output(sys.stdout)
    else:
        if not check_or_confirm_overwrite(args.output_file):
            print("Aborting.", file=sys.stderr)
            sys.exit(1)
        with NamedTemporaryFile(
                mode='w',
                dir=os.path.dirname(args.output_file),
                delete=False) as tmpf:
            try:
                tmpf.file.write(
                    '# this configuration generated by sedge from source file: %s\n\n' % (args.output_file))
                config.output(tmpf.file)
                os.rename(tmpf.name, args.output_file)
            except:
                os.unlink(tmpf.name)
                raise


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-k', '--key_directory',
        default=os.path.expanduser('~/.ssh'),
        type=str)
    parser.add_argument(
        '-v', '--verbose', action='store_true')
    parser.add_argument(
        'config_file',
        default=os.path.expanduser('~/.sedge/config'),
        nargs='?')
    parser.add_argument(
        'output_file',
        default=os.path.expanduser('~/.ssh/config'),
        nargs='?')
    args = parser.parse_args()
    try:
        process(args)
    except ParserException as e:
        print('Error: %s' % (e), file=sys.stderr)
